#!/usr/bin/env python
#    Copyright 2013 Mirantis, Inc.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import argparse
from itertools import chain
import json
from pprint import pprint
import sys
import urllib2

API_ROOT = "http://127.0.0.1:8000/api/"

passive_arguments = ["eid", "action"]


class SetAction(argparse.Action):
    """Custom argparse.Action subclass to store distinct values

    :returns: Set of arguments
    """
    def __call__(self, parser, namespace, values, option_string=None):
        try:
            getattr(namespace, self.dest).update(values)
        except AttributeError:
            setattr(namespace, self.dest, set(values))


def recur_get(multi_level_dict, key_chain):
    """Method accesses some field in nested dictionaries

    :returns: value for last key in key_chain in last dictionary
    """
    if not isinstance(multi_level_dict[key_chain[0]], dict):
        return multi_level_dict[key_chain[0]]
    else:
        return recur_get(multi_level_dict[key_chain[0]], key_chain[1:])


def format_table(data, acceptable_keys=None, subdict_keys=None):
    """Format list of dicts to ascii table

    :acceptable_keys list(str): list of keys for which to create table
                                also specifies their order
    :subdict_keys list(tuple(str)): list of key chains (tuples of key strings)
                                    which are applied to dictionaries
                                    to extract values
    """
    if subdict_keys:
        for key_chain in subdict_keys:
            for data_dict in data:
                data_dict[key_chain[0]] = recur_get(data_dict, key_chain)
    if acceptable_keys:
        rows = [tuple([value[key] for key in acceptable_keys])
                for value in data]
        header = tuple(acceptable_keys)
    else:
        rows = [tuple(x.values()) for x in data]
        header = tuple(data[0].keys())
    number_of_columns = len(header)
    column_widths = dict(
        zip(
            range(number_of_columns),
            (len(str(x)) for x in header)
        )
    )

    for row in rows:
        column_widths.update(
            (index, max(column_widths[index], len(str(element))))
            for index, element in enumerate(row)
        )
    row_template = ' | '.join(
        '%%-%ss' % column_widths[i] for i in range(number_of_columns)
    )

    return '\n'.join(
        (row_template % header,
         '-|-'.join(column_widths[column_index]*'-'
                    for column_index in range(number_of_columns)),
         '\n'.join(row_template % x for x in rows))
    )


def json_api_put_request(api, data):
    """Make PUT request to specific API with some data
    """
    opener = urllib2.build_opener(urllib2.HTTPHandler)
    request = urllib2.Request(API_ROOT + api, data=data)
    request.add_header('Content-Type', ' application/json')
    request.get_method = lambda: 'PUT'
    try:
        return json.loads(
            opener.open(request).read()
        )
    except urllib2.HTTPError as e:
            print_error(str(e) + "\n")


def json_api_get_request(api):
    """Make GET request to specific API
    """
    try:
        request = urllib2.urlopen(API_ROOT + api)
    except urllib2.HTTPError as e:
        print_error(str(e) + "\n")
    return json.loads(
        request.read()
    )


def json_api_post_request(api, data):
    """Make POST request to specific API with some data
    """
    try:
        return json.loads(
            urllib2.urlopen(
                url=API_ROOT + api,
                data=data
            ).read()
        )
    except urllib2.HTTPError as e:
            print_error(str(e) + "\n")


def has_arguments(params):
    current_arguments = [v for k, v in params.__dict__.iteritems()
                         if k not in passive_arguments]
    return any(current_arguments)


def print_error(message):
    sys.stderr.write(message)
    exit(1)


def check_for_attributes(params, attributes):
    not_paseed_checks = [attribute for attribute in attributes
                         if not getattr(params, attribute)]
    if len(not_paseed_checks):
        msg = "{0} required!\n".format(", ".join(not_paseed_checks))
        print_error(msg)


def release(params):
    """List and modify currently available releases
    """
    acceptable_keys = ["id", "name", "state", "operating_system", "version"]
    if not has_arguments(params) or params.list:
        data = json_api_get_request("releases/")
        print(format_table(data, acceptable_keys=acceptable_keys))
    if params.rid:
        data = json_api_get_request(
            "releases/{0}/"
            .format(params.rid)
        )
        print(format_table([data], acceptable_keys=acceptable_keys))


def environment(params):
    """Create, list and modify currently existing environments(clusters)
    """
    if not has_arguments(params) or params.list:
        acceptable_keys = ["id", "status", "name", "mode",
                           "release", "changes"]
        data = json_api_get_request("clusters/")
        if params.eid:
            data = filter(
                lambda x: x[u"id"] == int(params.eid),
                data
            )
        print(format_table(data, acceptable_keys=acceptable_keys,
                           subdict_keys=[("release", u"id")]))
    elif params.create:
        check_for_attributes(params, ["ename", "rid"])
        data = {"nodes": [],
                "tasks": [],
                "name": params.ename,
                "release": int(params.rid)}
        data = json.dumps(data)
        post_response = json_api_post_request("clusters/", data)
        pprint(post_response)
        if params.mode:
            data = {"mode": params.mode}
            data = json.dumps(data)
            put_response = json_api_put_request(
                "clusters/{0}".format(post_response[u"id"]),
                data
            )
            pprint(put_response)
    elif params.set:
        check_for_attributes(params, ["eid"])
        if params.mode or params.ename:
            data = {}
            if params.mode:
                data["mode"] = params.mode
            if params.ename:
                data["name"] = params.ename
            data = json.dumps(data)
            put_response = json_api_put_request(
                "clusters/{0}".format(params.eid),
                data
            )
            pprint(put_response)


def node(params):
    """List and assign available nodes to environments
    """
    if not has_arguments(params) or params.list:
        acceptable_keys = ["id", "status", "name", "cluster",
                           "mac", "roles", "online"]
        data = json_api_get_request("nodes/")
        if params.eid:
            data = filter(
                lambda x: x[u"cluster"] == int(params.eid),
                data
            )
        print(
            format_table(data, acceptable_keys=acceptable_keys)
        )
    elif params.set:
        check_for_attributes(params, ["nid", "role", "eid"])
        node_ids = list(chain(*params.nid))
        role = params.role.pop().lower()
        data = map(
            lambda node_id: {
                "id": node_id,
                "cluster_id": params.eid,
                "role": role,
                "pending_addition": True,
                "pending_deletion": False
            },
            node_ids
        )
        put_response = json_api_put_request("nodes/", json.dumps(data))
        pprint(put_response)


def network(params):
    """Show or modify network settings of specific environments
    """
    print(params)


def settings(params):
    """Show or modify environment settings
    """
    print(params)


def logs(params):
    """Show logs for specific environment
    """
    print(params)


def task(params):
    """Show tasks
    """
    print(params)


def notifications(params):
    """Show notifications
    """
    print(params)


def health(params):
    """Perform health check for environments
    """
    print(params)


def deploy(params):
    """Deploy changes to environments
    """
    check_for_attributes(params, ["eid"])
    put_response = json_api_put_request(
        "clusters/{0}/changes".format(params.eid),
        "{}"
    )
    pprint(put_response)


def fact(params):
    """Show computed facts for orchestrator
    """
    check_for_attributes(params, ["eid"])
    facts = json_api_get_request(
        "clusters/{0}/orchestrator/defaults"
        .format(params.eid)
    )
    print(facts)


def parse_node_ids(x):
    """Parse arguments with commas and spaces

    :returns: list of lists with numbers
    """
    filtered = [y for y in x.split(",") if y.strip() != '']
    if len(filtered) > 1:
        return map(int, filtered)
    elif len(filtered) == 1:
        return [int(filtered[0])]
    else:
        return None


actions = {
    "release": {
        "action": release,
        "args": [{
            "args": ["-l", "--list"],
            "params": {
                "dest": "list",
                "action": "store_true",
                "help": "List all available releases.",
                "default": False
            }
        }, {
            "args": ["-c", "--config"],
            "params": {
                "dest": "config",
                "action": "store_true",
                "help": "Configure release with --rid",
                "default": False
            }
        }, {
            "args": ["--rid"],
            "params": {
                "dest": "rid",
                "action": "store",
                "type": str,
                "help": "Specify release id to configure",
                "default": None
            }
        }]
    },
    "environment": {
        "action": environment,
        "args": [{
            "args": ["-l", "--list"],
            "params": {
                "dest": "list",
                "action": "store_true",
                "help": "List all available environments.",
                "default": False
            }
        }, {
            "args": ["-c", "--env-create", "--create"],
            "params": {
                "dest": "create",
                "action": "store_true",
                "help": "Create a new environment with specific "
                        "release id and name.",
                "default": False
            }
        }, {
            "args": ["--eid", "--env-id"],
            "params": {
                "dest": "eid",
                "action": "store",
                "type": str,
                "help": "environment id",
                "default": None
            }
        }, {
            "args": ["--name", "--ename", "--env-name"],
            "params": {
                "dest": "ename",
                "action": "store",
                "type": str,
                "help": "environment name",
                "default": None
            }
        }, {
            "args": ["-s", "--set"],
            "params": {
                "dest": "set",
                "action": "store_true",
                "help": "Set environment parameters (e.g ename, "
                        "deployment mode)",
                "default": False
            }
        }, {
            "args": ["-d", "--delete", "--env-delete"],
            "params": {
                "dest": "delete",
                "action": "store_true",
                "help": "Delete environment with specific eid or ename",
                "default": False
            }
        }, {
            "args": ["--rid"],
            "params": {
                "dest": "rid",
                "action": "store",
                "type": str,
                "help": "Release id",
                "default": None
            }
        }, {
            "args": ["-m", "--mode", "--deployment-mode"],
            "params": {
                "dest": "mode",
                "action": "store",
                "choices": ["multinode", "ha", "ha_full", "ha_compact"],
                "help": "Set deployment mode for specific environment.",
                "default": False
            }
        }]
    },
    "node": {
        "action": node,
        "args": [{
            "args": ["-l", "--list"],
            "params": {
                "dest": "list",
                "action": "store_true",
                "help": "List all nodes.",
                "default": False
            }
        }, {
            "args": ["--alloc"],
            "params": {
                "dest": "alloc",
                "action": "store_true",
                "help": "List only allocated nodes.",
                "default": False
            }
        }, {
            "args": ["-s", "--set"],
            "params": {
                "dest": "set",
                "action": "store_true",
                "help": "Set role for specific node.",
                "default": False
            }
        }, {
            "args": ["--nid", "--node-id"],
            "params": {
                "dest": "nid",
                "action": "store",
                "nargs": '+',
                "type": parse_node_ids,
                "help": "Node id.",
                "default": None
            }
        }, {
            "args": ["-r", "--role"],
            "params": {
                "dest": "role",
                "type": lambda v: v.split(','),
                "action": SetAction,
                "help": "Role to assign for node with nid.",
                "default": None
            }
        }, {
            "args": ["-rm", "--remove"],
            "params": {
                "dest": "remove",
                "action": "store_true",
                "help": "Remove node with specific nid.",
                "default": False
            }
        }, {
            "args": ["--eid", "--env-id"],
            "params": {
                "dest": "eid",
                "action": "store",
                "type": str,
                "help": "environment id",
                "default": None
            }
        }]
    },
    "network": {
        "action": network,
        "args": [{
            "args": ["-d", "--default"],
            "params": {
                "dest": "default",
                "action": "store_true",
                "help": "Open default configuration.",
                "default": False
            }
        }, {
            "args": ["-m", "--modify"],
            "params": {
                "dest": "modify",
                "action": "store_true",
                "help": "Modify current configuration.",
                "default": False
            }
        }, {
            "args": ["-v", "--verify"],
            "params": {
                "dest": "verify",
                "action": "store_true",
                "help": "Verify current configuration.",
                "default": False
            }
        }, {
            "args": ["-c", "--cancel"],
            "params": {
                "dest": "cancel",
                "action": "store_true",
                "help": "Remove current changes in configuration.",
                "default": False
            }
        }, {
            "args": ["-s", "--save"],
            "params": {
                "dest": "save",
                "action": "store_true",
                "help": "Save current changes in configuration.",
                "default": False
            }
        }, {
            "args": ["--eid", "--env-id"],
            "params": {
                "dest": "eid",
                "action": "store",
                "type": str,
                "help": "environment id",
                "default": None
            }
        }]
    },
    "settings": {
        "action": settings,
        "args": [{
            "args": ["-d", "--default"],
            "params": {
                "dest": "default",
                "action": "store_true",
                "help": "Open default configuration.",
                "default": False
            }
        }, {
            "args": ["-m", "--modify"],
            "params": {
                "dest": "modify",
                "action": "store_true",
                "help": "Modify current configuration.",
                "default": False
            }
        }, {
            "args": ["-c", "--cancel"],
            "params": {
                "dest": "cancel",
                "action": "store_true",
                "help": "Remove current changes in configuration.",
                "default": False
            }
        }, {
            "args": ["-s", "--save"],
            "params": {
                "dest": "save",
                "action": "store_true",
                "help": "Save current changes in configuration.",
                "default": False
            }
        }, {
            "args": ["--eid", "--env-id"],
            "params": {
                "dest": "eid",
                "action": "store",
                "type": str,
                "help": "environment id",
                "default": None
            }
        }]
    },
    "logs": {
        "action": logs,
        "args": [{
            "args": ["-db", "--date-before"],
            "params": {
                "dest": "before",
                "action": "store",
                "type": str,
                "help": "Date before which collect logs.",
                "default": None
            }
        }, {
            "args": ["-da", "--date-after"],
            "params": {
                "dest": "after",
                "action": "store",
                "type": str,
                "help": "Date after which collect logs.",
                "default": None
            }
        }, {
            "args": ["-m", "--max-entries"],
            "params": {
                "dest": "max",
                "action": "store",
                "type": str,
                "help": "Maximum number of log entries.",
                "default": None
            }
        }, {
            "args": ["-n", "--node"],
            "params": {
                "dest": "node",
                "action": "store",
                "type": str,
                "help": "From which node to collect logs.",
                "default": None
            }
        }, {
            "args": ["-s", "--source"],
            "params": {
                "dest": "source",
                "action": "store",
                "type": str,
                "help": "Service to use as log source. "
                        "(web backend, REST, orchestrator)",
                "default": None
            }
        }, {
            "args": ["-ll", "--log-level"],
            "params": {
                "dest": "level",
                "action": "store",
                "type": str,
                "help": "Log level. e.g DEBUG, INFO, WARNING",
                "default": None
            }
        }, {
            "args": ["--eid", "--env-id"],
            "params": {
                "dest": "eid",
                "action": "store",
                "type": str,
                "help": "environment id",
                "default": None
            }
        }]
    },
    "task": {
        "action": task,
        "args": []
    },
    "notification": {
        "action": notifications,
        "args": []
    },
    "health": {
        "action": health,
        "args": []
    },
    "deploy": {
        "action": deploy,
        "args": [{
            "args": ["--eid", "--env-id"],
            "params": {
                "dest": "eid",
                "action": "store",
                "type": str,
                "help": "environment id",
                "default": None
            }
        }]
    },
    "fact": {
        "action": fact,
        "args": [{
            "args": ["--eid", "--env-id"],
            "params": {
                "dest": "eid",
                "action": "store",
                "type": str,
                "help": "environment id",
                "default": None
            }
        }]
    }
}


substitutions = {
    "env": "environment",
    "net": "network",
    "rel": "release",
    "list": "--list",
    "set": "--set",
    "delete": "--delete",
    "create": "--create"
}

if __name__ == '__main__':
    sys.argv = map(
        lambda x: substitutions.get(x, x),
        sys.argv
    )
    parser = argparse.ArgumentParser()
    parser.add_argument(*["--eid", "--env-id"], **{
        "dest": "eid",
        "action": "store",
        "type": str,
        "help": "environment id",
        "default": None
    })
    subparsers = parser.add_subparsers(
        dest="action", help='actions'
    )

    for action, params in actions.iteritems():
        action_parser = subparsers.add_parser(
            action, help=params["action"].__doc__
        )
        for arg in params.get("args", []):
            action_parser.add_argument(
                *arg["args"],
                **arg["params"]
            )

    params, other_params = parser.parse_known_args()
    sys.argv.pop(1)

    if params.action not in actions:
        parser.print_help()
        sys.exit(0)
    current_action = getattr(params, "action")
    delattr(params, "action")
    actions[current_action]["action"](params)
